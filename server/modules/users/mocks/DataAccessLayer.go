// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mgo "gopkg.in/mgo.v2"
import mock "github.com/stretchr/testify/mock"
import users "golang-mvc-boilerplate/server/modules/users"

// DataAccessLayer is an autogenerated mock type for the DataAccessLayer type
type DataAccessLayer struct {
	mock.Mock
}

// c provides a mock function with given fields: collectionName
func (_m *DataAccessLayer) c(collectionName string) *mgo.Collection {
	ret := _m.Called(collectionName)

	var r0 *mgo.Collection
	if rf, ok := ret.Get(0).(func(string) *mgo.Collection); ok {
		r0 = rf(collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Collection)
		}
	}

	return r0
}

// CloseSession provides a mock function with given fields:
func (_m *DataAccessLayer) CloseSession() {
	_m.Called()
}

// DeleteUser provides a mock function with given fields: collectionName, userID
func (_m *DataAccessLayer) DeleteUser(collectionName string, userID string) error {
	ret := _m.Called(collectionName, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(collectionName, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: collectionName, userID, userCheck
func (_m *DataAccessLayer) FindUser(collectionName string, userID string, userCheck *users.User) error {
	ret := _m.Called(collectionName, userID, userCheck)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *users.User) error); ok {
		r0 = rf(collectionName, userID, userCheck)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUsers provides a mock function with given fields: collectionName, userList
func (_m *DataAccessLayer) GetUsers(collectionName string, userList *users.Users) error {
	ret := _m.Called(collectionName, userList)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *users.Users) error); ok {
		r0 = rf(collectionName, userList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: collectionName, user
func (_m *DataAccessLayer) InsertUser(collectionName string, user users.User) error {
	ret := _m.Called(collectionName, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, users.User) error); ok {
		r0 = rf(collectionName, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAdmin provides a mock function with given fields: collectionName, userID, result
func (_m *DataAccessLayer) IsAdmin(collectionName string, userID string, result *users.Result) error {
	ret := _m.Called(collectionName, userID, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *users.Result) error); ok {
		r0 = rf(collectionName, userID, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: collectionName, userID, updatedUser
func (_m *DataAccessLayer) UpdateUser(collectionName string, userID string, updatedUser users.User) error {
	ret := _m.Called(collectionName, userID, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, users.User) error); ok {
		r0 = rf(collectionName, userID, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
